{"name": "test_steps_demo[pytest]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=96.0.4664.45)\nStacktrace:\n0   chromedriver                        0x000000010c4b5519 __gxx_personality_v0 + 577193\n1   chromedriver                        0x000000010c441663 __gxx_personality_v0 + 102387\n2   chromedriver                        0x000000010c008d28 chromedriver + 171304\n3   chromedriver                        0x000000010c03d6be chromedriver + 386750\n4   chromedriver                        0x000000010c06fb04 chromedriver + 592644\n5   chromedriver                        0x000000010c05addd chromedriver + 507357\n6   chromedriver                        0x000000010c06d8ab chromedriver + 583851\n7   chromedriver                        0x000000010c05b0a3 chromedriver + 508067\n8   chromedriver                        0x000000010c0315ae chromedriver + 337326\n9   chromedriver                        0x000000010c0328d5 chromedriver + 342229\n10  chromedriver                        0x000000010c47175f __gxx_personality_v0 + 299247\n11  chromedriver                        0x000000010c48869a __gxx_personality_v0 + 393258\n12  chromedriver                        0x000000010c48df5b __gxx_personality_v0 + 415979\n13  chromedriver                        0x000000010c489a3a __gxx_personality_v0 + 398282\n14  chromedriver                        0x000000010c46637c __gxx_personality_v0 + 253196\n15  chromedriver                        0x000000010c4a5458 __gxx_personality_v0 + 511464\n16  chromedriver                        0x000000010c4a55e1 __gxx_personality_v0 + 511857\n17  chromedriver                        0x000000010c4bc968 __gxx_personality_v0 + 606968\n18  libsystem_pthread.dylib             0x00007fff61154661 _pthread_body + 340\n19  libsystem_pthread.dylib             0x00007fff6115450d _pthread_body + 0\n20  libsystem_pthread.dylib             0x00007fff61153bf9 thread_start + 13", "trace": "test_data1 = 'pytest'\n\n    @pytest.mark.parametrize('test_data1', ['allure', 'pytest', 'unittest'])\n    def test_steps_demo(test_data1):\n        driver = webdriver.Chrome()\n        driver.get('https://www.baidu.com')\n    \n>       driver.find_element('kw').send_keys(test_data1)\n\ntest_baidudemo.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:1238: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n../venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10586ed30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: invalid locator\\\\n  (Sessi...007fff6115450d _pthread_body + 0\\\\n20  libsystem_pthread.dylib             0x00007fff61153bf9 thread_start + 13\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\nE         (Session info: chrome=96.0.4664.45)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010c4b5519 __gxx_personality_v0 + 577193\nE       1   chromedriver                        0x000000010c441663 __gxx_personality_v0 + 102387\nE       2   chromedriver                        0x000000010c008d28 chromedriver + 171304\nE       3   chromedriver                        0x000000010c03d6be chromedriver + 386750\nE       4   chromedriver                        0x000000010c06fb04 chromedriver + 592644\nE       5   chromedriver                        0x000000010c05addd chromedriver + 507357\nE       6   chromedriver                        0x000000010c06d8ab chromedriver + 583851\nE       7   chromedriver                        0x000000010c05b0a3 chromedriver + 508067\nE       8   chromedriver                        0x000000010c0315ae chromedriver + 337326\nE       9   chromedriver                        0x000000010c0328d5 chromedriver + 342229\nE       10  chromedriver                        0x000000010c47175f __gxx_personality_v0 + 299247\nE       11  chromedriver                        0x000000010c48869a __gxx_personality_v0 + 393258\nE       12  chromedriver                        0x000000010c48df5b __gxx_personality_v0 + 415979\nE       13  chromedriver                        0x000000010c489a3a __gxx_personality_v0 + 398282\nE       14  chromedriver                        0x000000010c46637c __gxx_personality_v0 + 253196\nE       15  chromedriver                        0x000000010c4a5458 __gxx_personality_v0 + 511464\nE       16  chromedriver                        0x000000010c4a55e1 __gxx_personality_v0 + 511857\nE       17  chromedriver                        0x000000010c4bc968 __gxx_personality_v0 + 606968\nE       18  libsystem_pthread.dylib             0x00007fff61154661 _pthread_body + 340\nE       19  libsystem_pthread.dylib             0x00007fff6115450d _pthread_body + 0\nE       20  libsystem_pthread.dylib             0x00007fff61153bf9 thread_start + 13\n\n../venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:243: InvalidArgumentException"}, "parameters": [{"name": "test_data1", "value": "'pytest'"}], "start": 1637149110235, "stop": 1637149113292, "uuid": "d502120d-5f2a-4a12-97d0-ce999ecfa56d", "historyId": "78bf30ba964b80676a29ef86e279c69c", "testCaseId": "c1bd71ed6b29aa553aa5af4cbca54344", "fullName": "test_baidudemo#test_steps_demo", "labels": [{"name": "suite", "value": "test_baidudemo"}, {"name": "host", "value": "localhost"}, {"name": "thread", "value": "12989-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_baidudemo"}]}